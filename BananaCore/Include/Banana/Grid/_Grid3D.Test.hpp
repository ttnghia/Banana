//-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
//-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
//
//  Copyright (c) 2017 by
//       __      _     _         _____
//    /\ \ \__ _| |__ (_) __ _  /__   \_ __ _   _  ___  _ __   __ _
//   /  \/ / _` | '_ \| |/ _` |   / /\/ '__| | | |/ _ \| '_ \ / _` |
//  / /\  / (_| | | | | | (_| |  / /  | |  | |_| | (_) | | | | (_| |
//  \_\ \/ \__, |_| |_|_|\__,_|  \/   |_|   \__,_|\___/|_| |_|\__, |
//         |___/                                              |___/
//
//  <nghiatruong.vn@gmail.com>
//  All rights reserved.
//
//-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
//-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

#pragma once

#include <Grid/Grid3D.h>
#include <Banana/Macros.h>
#include <Banana/TypeNames.h>

#include <catch.hpp>

//-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
TEST_CASE("Test Grid3D", "[Grid3D]")
{
    Banana::Grid3D<float> grid1;
    (void)grid1;

    ////////////////////////////////////////////////////////////////////////////////
    Banana::Grid3D<float> grid(Vec3<float>(0), Vec3<float>(1), 0.1f);
    REQUIRE(grid.getNumCellX() == 10);
    REQUIRE(grid.getNumCellY() == 10);
    REQUIRE(grid.getNumCellZ() == 10);

    REQUIRE(grid.isValidCell(Vec3i(1, 2, 3)));
    REQUIRE(!grid.isValidCell(Vec3i(1, 2, -1)));

    REQUIRE(grid.getNearestValidCellIdx(Vec3i(1, 2, -1)) == Vec3i(1, 2, 0));
    REQUIRE(grid.getValidCellIdx<int>(Vec3f(0.15, 0.25, -0.5)) == Vec3i(1, 2, 0));

    //////////////////////////////////////////////////////////////////////////////////
    Vec_Vec3<float> particles;
    Vec_UInt        neighborList;
    Vec3f           p1 = Vec3f(0.15, 0.25, 0.5);
    Vec3f           p2 = Vec3f(0.25, 0.25, 0.5);
    particles.push_back(p1);
    particles.push_back(p2);
    grid.collectIndexToCells(particles);
    grid.getNeighborList(p1, neighborList);
    REQUIRE(neighborList.size() == 2);
}
